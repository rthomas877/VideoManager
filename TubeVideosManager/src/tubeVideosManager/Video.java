package tubeVideosManager;

import java.util.ArrayList;

/**
 * A video has a title, url, durationInMinutes and a genre. Comments about the
 * video are kept in an ArrayList (comments). For YouTube videos the url is the
 * one generated by the "Copy embed code" option.
 * 
 * @author UMCP CS Department
 *
 */
public class Video implements Comparable<Video> {
	private String title, url;
	private int durationInMinutes;
	private Genre videoGenre;
	private ArrayList<String> comments;

	/**
	 * Initializes a video object. If any parameter is null or if a string parameter
	 * is a blank (according to String class isBlank() method), the method will
	 * throw an IllegalArgumentException (with any message) and perform no
	 * processing. Also the same exception will be thrown if the duration is zero or
	 * negative.
	 * 
	 * @param title
	 * @param url
	 * @param durationInMinutes
	 * @param videoGenre
	 */
	public Video(String title, String url, int durationInMinutes, Genre videoGenre) { //creates a video object with parameters, and gives it an arraylist of Strings for comments
		if (title == null || url == null || title.isBlank() || url.isBlank() || durationInMinutes < 1) {
			throw new IllegalArgumentException("Invalid Video");
		} else {
			this.title = title;
			this.durationInMinutes = durationInMinutes;
			this.url = url;
			this.videoGenre = videoGenre;
			this.comments = new ArrayList<String>();
		}
	}

	/**
	 * Initializes the Video object so changes to the parameter do not affect the
	 * current object. Your implementation must be efficient (avoid any unnecessary
	 * copies).
	 * 
	 * @param video
	 */
	public Video(Video video) { //creates a new video object that avoids privacy leaks
		this.title = video.title; //immutable
		this.url = video.url; //immutable
		this.comments = new ArrayList<String>(video.comments); //only variable that is mutable
		this.durationInMinutes = video.durationInMinutes; //Primitive type
		this.videoGenre = video.videoGenre; //Primitive type
		
	}

	/**
	 * Get method for title
	 * 
	 * @return title string
	 */
	public String getTitle() { //getter method for title
		return this.title;
	}

	/**
	 * Get method for url
	 * 
	 * @return url string
	 */
	public String getUrl() { //getter method for url
		return this.url;
	}

	/**
	 * Get method for duration
	 * 
	 * @return duration
	 */
	public int getDurationInMinutes() { //getter method for duration
		return this.durationInMinutes;
	}

	/**
	 * Get method for video genre
	 * 
	 * @return string with genre
	 */
	public Genre getGenre() { //getter method for genre
		return this.videoGenre;
	}

	/**
	 * Provided; please don't modify. toString for class
	 * 
	 * @return string with object info
	 */
	public String toString() {
		String answer = "Title: " + "\"" + title + "\"\n";

		answer += "Url: " + url + "\n";
		answer += "Duration (minutes): " + durationInMinutes + "\n";
		answer += "Genre: " + videoGenre + "\n";

		return answer;
	}

	/**
	 * Adds specified comments to the video. If the parameter is null or is a blank
	 * string (according to String class isBlank() method) the method will throw an
	 * IllegalArgumentException (with any message) and perform no processing.
	 * 
	 * @param comments
	 * @return true if comments added; false otherwise
	 */
	public boolean addComments(String comments) { //adds valid comments to videos string arraylist
		if (comments == null || comments.isBlank()) {
			throw new IllegalArgumentException("Invalid Comment");
		} else {
			this.comments.add(comments);
			return true;
		}
	}

	/**
	 * Returns copy so changes to the copy does not affect the original. Your
	 * implementation must be efficient (avoid any unnecessary copies).
	 * 
	 * @return ArrayList of strings
	 */
	public ArrayList<String> getComments() { //deep copy needed to avoid arraylist privacy leak, returns list of comments avoiding a privacy leak
		ArrayList<String> deepCopy = new ArrayList<String>();
		for (String comments : this.comments)  {
			deepCopy.add(comments);
		} 
		return deepCopy;
	}

	/**
	 * Videos will be compared using title. If we were to sort an ArrayList of
	 * Videos, they will appear in lexicographical (alphabetical) order (e.g, "A",
	 * "B", "C").
	 * 
	 * @return negative, 0, or positive value
	 */
	public int compareTo(Video video) { //compares video titles
		int num = this.title.compareTo(video.title); // -1 if this < video, 0 if equal, and 1 if this > video
		//num is how much bigger or smaller video is compared to this
		if (num > 0) {
			return 1;
		} else if (num < 0) {
			return -1;
		} else {
			return 0;
		}
	}

	/**
	 * Two Video objects are considered equal if they have the same title. Implement
	 * the method using the instanceof operator rather than using getClass().
	 * 
	 * @return true if objects are considered equal; false otherwise
	 */
	@Override
	public boolean equals(Object obj) { //returns boolean if video titles are equal
		if (this == obj) { //if same object
			return true;
		} else if (!(obj instanceof Video)) { //if obj is not a video object
			return false;
		} else {
			Video ob = (Video) obj; //casts general object obj as a Video
			return this.title.equals(ob.title);
		}
	}
}
